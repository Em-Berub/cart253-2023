juggle ex

***********************



"use strict";

let gball
let paddle
let gravityForce = 0.0020
let balls = []
let hinders = []
let numBalls = 30
let numHin= 5

function preload() {
}

let state = 'start'


function setup() {

    createCanvas(windowWidth, windowHeight)

    gball = new Gball(50,15)
    paddle = new Paddle(300, 20)

    for (let i = 0; i < numBalls; i++) {
        let x = random(0,700)
        let y = random(-200,0)
        let ball = new Ball(x,y)
        balls.push(ball)
    }

    for (let i = 0; i < numHin  ; i++) {
        
        let hinder = new Hinder(75, 10)
        hinders.push(hinder)
    }
    
    

}

// createCanvas(windowWidth, windowHeight,WEBGL)
function draw() {

   
    background(250)
    paddle.move()
    paddle.display()
   gball.display()
   gball.move()
    // rebound.display()
    // rebound.move()
    gball.bounce()
    gball.gravity(gravityForce)

    for (let i = 0; i < balls.length; i++) {
        let ball = balls[i]

        if (ball.active) {
            ball.gravity(gravityForce)
            ball.move()
            ball.bounce()
            // ball.bouncetwo()
            ball.display()
            // rebound.grown(ball)
            ball.touch()
            // ball.bouncetwo(hinder)
        }
    

        for (let j = 0; j < hinders.length; j++) {
            let hinder = hinders[j];
            // hinder.bounce(balls)
    hinder.bounce(ball)
            hinder.display()
            
          }
        }


          
            // for (let j = 0; j < hinders.length; j++) {
            //     let hinder = hinders[j];
            //     hinder.bounce(ball)
        
            //     hinder.display()
                
            //   }




        //     let aboveBalls = true
        //     for (let i = 0; i < balls.length; i++) {
        //         let ball = balls[i];
            
        //         if (ball.y < windowHeight) {
        //             aboveBalls = false;
        //             break;
        //         }
        //   if (aboveBalls) {
        //         // state = 'end';
        //         background(255, 0, 0)
        //         fill(255)
        //         textSize(60)
        //         // textAlign(CENTER, CENTER)
            
               
        //         textStyle(BOLD)
        //         text('END',windowWidth/2, windowHeight/2)
        //     }
        
        //     }
            
          
        
        
    //         let afterWindow = true;
        
    //     for (let i = 0; i < hinders.length; i++) {
    //         let hinder = hinders[i];
        
    //         if (hinder.y -200< windowHeight) {
    //             afterWindow = false;
    //             break;
    //         }
    //     }
        
    //     if (afterWindow) {
    //         // state = 'end';
    //         background(255, 0, 0)
    //         fill(255)
    //         textSize(40)
    //         textAlign(CENTER, TOP)
        
    //         text('End of simulation',500,12)
    //     }
        
        
       
    // }



    let aboveBalls = true
    for (let i = 0; i < balls.length; i++) {
        let ball = balls[i];
    
        if (ball.y < windowHeight) {
            aboveBalls = false;
            break;
        }
 

    }
    
    if (aboveBalls) {
        // state = 'end';
        background(255, 0, 0)
        fill(255)
        textSize(60)
        // textAlign(CENTER, CENTER)
    
       
        textStyle(BOLD)
        text('END',windowWidth/2, windowHeight/2)
    }


    let afterWindow = true;

for (let i = 0; i < hinders.length; i++) {
    let hinder = hinders[i];

    if (hinder.y - 25 < windowHeight) {
        afterWindow = false;
        break;
    }
}

if (afterWindow) {
    // state = 'end';
    background(255, 0, 0)
    fill(0)
    textSize(40)
    textAlign(CENTER, TOP)

    text('End of simulation',500,120)
}



}




    // let colorChanged = false;
    // for (let i = 0; i < hinders.length  ; i++) {
    //     let hinder = hinders[i];
    //     if (state === 'start' && hinder.y> windowHeight){
    //         state = 'end'
    //         colorChanged = true
    //     }
    //     else if (state ==='end' && !colorChanged){
    //         background(255,0,0)
    //         colorChanged = true;
    //     }
    // }
  
    // for (let i = 0; i < hinders.length; i++) {
    //     let hinder = hinders[i]
       
    // }



*****************************************
class Paddle {

    constructor(w, h) {
        this.width = w
        this.height = h
        this.x = windowWidth/2
        this.y = height - this.height / 2
        this.arrow =20
    }

   //The paddle is now controlled with the left and right arrows

    move() {
        
            if (keyIsDown (RIGHT_ARROW)) {
              this.x = this.x + this.arrow ;
            } else if (keyIsDown (LEFT_ARROW)) {
                this.x = this.x -this.arrow ;
            }
          
    }


    display() {
        push()
        fill(255,0,0)
        noStroke()
        rectMode(CENTER)
        rect(this.x, this.y, this.width, this.height)
        pop()
    }
}
***********************************

class Gball {

    constructor(x, y) {
        this.x = x
        this.y = y
        this.vx = 0
        this.vy = 0
        this.ax = 0
        this.ay = 0
        this.maxSpeed = 10
        this.size = 30
        this.active = true
        this.growRate = 0.5
        this.maxSize = 100
    }


    gravity(force) {
        this.ay = this.ay + force
    }

    // grown(ball){
        
        
    //         // Calculate the distance between the bee and the flower
    //         let d = dist(this.x, this.y, ball.x, ball.y);
    //         // If they overlap...
    //         if (d < this.size / 2 + ball.size / 2) {
    //           // The bee should grow
    //           // Notice how we can call OTHER METHODS of the Bee by using "this"
    //           // So this.grow() calls the grow() method for THIS bee
    //           this.vy = -this.vy
    //           this.ay = 0
    //           this.grow();
    //           // The flower should react to being pollinated so we call its method
    //           // that handles that!
             
    //         }
    //       }
    
          grow() {
            // Grow by increasing the size by a set amount
            this.size = this.size + this.growRate;
            // Constrain the growth to a maximum
            this.size = constrain(this.size, 0, this.maxSize);
          }
    //Now the balls come back with the opposite velocity when they hit a side of the canvas
    move() {
        this.vx = this.vx + this.ax
        this.vy = this.vy + this.ay

        this.vx = constrain(this.vx, -this.maxSpeed, this.maxSpeed)
        this.vy = constrain(this.vy, -this.maxSpeed, this.maxSpeed)
        this.x = this.x + this.vx
        this.y = this.y + this.vy

        if (this.y - this.size / 2 > height) {
            this.active = false
        }

        if (this.x > width  ) {
            this.vx = -this.vx
        }
        if (this.x < 0  ) {
            this.vx = -this.vx
        }
    }

        
    bounce() {
        if (this.x > paddle.x - paddle.width / 2 &&
            this.x < paddle.x + paddle.width / 2 &&
            this.y + this.size / 2 > paddle.y - paddle.height / 2 &&
            this.y - this.size < paddle.y + paddle.height / 2) {

            let dx = this.x - paddle.x
            this.vx = this.vx + map(dx, -paddle.width/2, paddle.width/2, -10,10)

            this.vy = -this.vy
            this.ay = 0
        }
    }





     
    display() {
        push()
        fill(0, 100, 100)
        stroke(10)
        ellipse(this.x, this.y, this.size)
        pop()
    }

}


******************************
class Ball {

    constructor(x, y) {
        this.x = x
        this.y = y
        this.vx = 0
        this.vy = 0
        this.ax = 0
        this.ay = 0
        this.maxSpeed = 10
        this.size = 40
        this.active = true
        this.maxSize = 75
        this.fill= 255
        this.fill2= 150
        this.fill3= 50
        

    }

    gravity(force) {
        this.ay = this.ay + force
    }


    //Now the balls come back with the opposite velocity when they hit a side of the canvas
    move() {
        this.vx = this.vx + this.ax
        this.vy = this.vy + this.ay

        this.vx = constrain(this.vx, -this.maxSpeed, this.maxSpeed)
        this.vy = constrain(this.vy, -this.maxSpeed, this.maxSpeed)
        this.x = this.x + this.vx
        this.y = this.y + this.vy

        if (this.y - this.size / 2 > height) {
            this.active = false
        }

        if (this.x > width  ) {
            this.vx = -this.vx
        }
        if (this.x < 0  ) {
            this.vx = -this.vx
        }
    }

        
    bounce() {
        if (this.x > paddle.x - paddle.width / 2 &&
            this.x < paddle.x + paddle.width / 2 &&
            this.y + this.size / 2 > paddle.y - paddle.height / 2 &&
            this.y - this.size/2 < paddle.y + paddle.height / 2) {

            let dx = this.x - paddle.x
            this.vx = this.vx + map(dx, -paddle.width/2, paddle.width/2, -10,10)

            this.vy = -this.vy
            this.ay = 0
        }

    }


   

    touch() {
        // // Choose a random amount to grow
        // let growth = 0.5
        // // Increase the petal thickness (divide by 10 to make it less rapid)
        // this.size = this.size + growth 
        // // Increase the centre of the flower
        // this.vy = -this.vy
        // // Constrain the elements
        // this.size = constrain(this.size, 0, this.maxSize);




    

        let d = dist(this.x, this.y, gball.x, gball.y);
        // If they overlap...
        if (d < this.size / 2 + gball.size / 2) {
        // Choose a random amount to grow
        let growth = 0.5
        // Increase the petal thickness (divide by 10 to make it less rapid)
        this.size = this.size + growth 
        // Increase the centre of the flower
        this.vy = -this.vy
        // Constrain the elements
        this.size = constrain(this.size, 0, this.maxSize);

          gball.grow()
        }
      }




    display() {
        push()
        fill(this.fill,this.fill2,this.fill3)
        stroke(10)
        ellipse(this.x, this.y, this.size)
        pop()
    }

}

***********************************




class Hinder {

    constructor(w, h) {
        this.width = w
        this.height = h
        this.x = random(0, windowWidth)
        this.y =  random(600, windowHeight)
      

    }

    bounce(ball) {
        if (ball.vy> 0 &&
            ball.y + ball.size/2> this.y - this.height / 2 &&
            ball.y - ball.size/2< this.y + this.height / 2 &&
           ball.x > this.x - this.width / 2 &&
            ball.x  < this.x + this.width / 2) {

            // let dx = this.x - this.x
            // ball.vx = this.vx + map(dx, -this.width/2, this.width/2, -10,10)

            // this.x =this.x + 50
            this.y = this.y +50
            ball.vy =- 10
            ball.vx = random(-5,5)
                ball.fill = random(100,250)
                ball.fill2 = random(0,100)
                ball.fill3 = random(0,50)
        }

    }




    // bouncetwo() {
    //     if (this.x > hinder.x - hinder.width / 2 &&
    //         this.x < hinder.x + hinder.width / 2 &&
    //         this.y + this.size / 2 > hinder.y - hinder.height / 2 &&
    //         this.y - this.size < hinder.y + hinder.height / 2) {

    //         // let dx = this.x - hinder.x
    //         // this.vx = this.vx + map(dx, -hinder.width/2, hinder.width/2, -10,10)

    //         this.vy = -this.vy
    //         this.ay = 0
    //     }
    // }



    display() {
        
        fill(255,0,0)
        stroke(255,0,0)
        rectMode(CENTER)
        rect(this.x, this.y, this.width, this.height)
        
    }
}

